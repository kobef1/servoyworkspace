
/**
 * @type {String}
 *
 * @properties={typeid:35,uuid:"8E4DBEFD-B662-4D55-A6CB-8D77FD9BA1A3"}
 */

/**
 * @type {String}
 *
 * @properties={typeid:35,uuid:"2B33BDAB-CD16-45DB-9AF3-CE15B92E411B"}
 */
var pri;
/**
 * @type {String}
 *
 * @properties={typeid:35,uuid:"F421B2B2-8E04-4DA5-8160-D1F2AEC27834"}
 */
var prod;
/**
 * @type {String}
 *
 * @properties={typeid:35,uuid:"7D26E631-32B0-4B7B-8280-73C6996F1384"}
 */
var quant; 

/**
 * TODO generated, please specify type and doc for the params
 * @param event
 *
 * @properties={typeid:24,uuid:"A216074F-7329-49E7-93A3-B00BF31B90AD"}
 */
function onAction(event) {
	// TODO Auto-generated method stub
	if(foundset.prodname == "null")
		
		plugins.dialogs.showInfoDialog('Please fill up form', 'ok');
	

	databaseManager.saveData();
	application.output("saved");
	history.back();
}

/**
 * Handle focus gained event of the element.
 *
 * @param {JSEvent} event the event that triggered the action
 *
 * @properties={typeid:24,uuid:"37211E50-4B6A-435E-BAEE-A37432BB39C0"}
 */
function onFocusGained(event) {
	// TODO Auto-generated method stub
	databaseManager.setAutoSave(false);
}

/**
 * Handle focus gained event of the element.
 *
 * @param {JSEvent} event the event that triggered the action
 *
 * @properties={typeid:24,uuid:"07991C02-6865-4935-AEFD-8C3D72AA1C9D"}
 */
function on(event) {
	// TODO Auto-generated method stub
	
	databaseManager.setAutoSave(false);
	foundset.newRecord();
}

/**
 * @param {JSEvent} event
 * @param {string} dataTarget
 *
 * @properties={typeid:24,uuid:"505FAC37-F268-4516-B55F-92E642615F0E"}
 */
function onAction1(event, dataTarget) {
	// TODO Auto-generated method stub
	history.back();

}

/**
 * Handle changed data, return false if the value should not be accepted. In NGClient you can return also a (i18n) string, instead of false, which will be shown as a tooltip.
 *
 * @param {String} oldValue old value
 * @param {String} newValue new value
 * @param {JSEvent} event the event that triggered the action
 *
 * @return {Boolean}
 *
 * @properties={typeid:24,uuid:"BEE16AFD-4EE8-4208-B5F4-91D34A078613"}
 */
function onDataChange(oldValue, newValue, event) {
	// TODO Auto-generated method stub
	validate();
	return true
}

/**
 * @properties={typeid:24,uuid:"CCC3BDF1-849C-4E89-984B-15D8BBC4A39B"}
 */

/**
 * @properties={typeid:24,uuid:"2DFB7F50-181B-4BE6-8493-0AA5840246F0"}
 */
/**
 * @type {String}
 *
 * @properties={typeid:35,uuid:"649BACD3-3D73-442C-93B0-A7FE52E2A2C9"}
 */
var callout = '';

/**
 * @type {String}
 *
 * @properties={typeid:35,uuid:"5DCC3590-735A-45EB-BA8B-CFE906572B94"}
 */
var INVALID = 'invalid';

/**
 * @type {String}
 *
 * @properties={typeid:35,uuid:"22C5F7AE-9141-497E-A96F-0CB021CC40B2"}
 */
var VISIBLE = 'visible';

/**
 * @protected 
 * @type {Array<{dataProviderID:String,message:String}>}
 * @properties={typeid:35,uuid:"A400FE72-DA33-44F6-8CAF-39D22B0599FF",variableType:-4}
 */
var validationMarkers = {};

/**
 * Handle changed data, return false if the value should not be accepted. 
 * In NGClient you can return also a (i18n) string, instead of false, which will be shown as a tooltip.
 *
 * @param oldValue old value
 * @param newValue new value
 * @param {JSEvent} event the event that triggered the action
 *
 * @return {Boolean}
 *
 * @protected
 *
 * @properties={typeid:24,uuid:"1584DBFD-13B8-43D1-A334-7CE60102F175"}
 */
function onElementDataChange(oldValue, newValue, event) {
	
	// VALIDATE THE FOUNDSET FOR EVERY CHANGE
	validate();
	return true;
}

/**
 * @properties={typeid:24,uuid:"6EB91D1B-7814-45FC-B93C-622A9E094FED"}
 */
function validate(){
	validationMarkers = [];
	
	/** @type {Function} */	
	var validationHandler = foundset['validate'];
	if(validationHandler){		
		validationMarkers = validationHandler();
	}
	updateUI();
	return validationMarkers.length > 0;
}

/**
 * @properties={typeid:24,uuid:"C0ADC6BD-000B-484C-BB91-B9788DC10561"}
 */
function updateUI(){
	
	
	// collect messages
	var messages = [];
	
	//	check each field
	for(var i in elements.allnames){
		var name = elements.allnames[i];
		var e = elements[name];
		/** @type {RuntimeTextField} */
		var field = e;
		if(!field.getDataProviderID) continue;	// really anything that can have a data provider
		
		//	Error marker associated with this field's data provider
		var marker = getMarker(field);
		if(marker){
			
			// Add the invalid style class to the field nd set a tooltip
			field.addStyleClass(INVALID);
			field.toolTipText = marker.message;
			
			// move callout bubble
			var x = 400; //field.getLocationX() + field.getWidth() + 10;
			var y = field.getLocationY();
			elements.callout.setLocation(x,y)
			
			// collect messages
			messages.push(marker.message);
			
		//	no markers associated with this field's data provider
		} else {
			field.removeStyleClass(INVALID);
			field.toolTipText = '';
		}
	}
	
	// add messages to callout bubble and show (fade-in)
	if(messages.length){
		callout = messages.join('<br>');
		elements.callout.addStyleClass(VISIBLE);

	// no messages?  then hid callout
	} else {
		elements.callout.removeStyleClass(VISIBLE);
		callout = '';
	}
}

/**
 * @protected 
 * @param {RuntimeTextField} target
 * @return {{dataProviderID:String,message:String}}
 * @properties={typeid:24,uuid:"1CBB2D22-0773-4F2C-8430-8EDADE04E302"}
 */
function getMarker(target){
	for(var i in validationMarkers){
		var marker = validationMarkers[i];
		if(marker.dataProviderID == target.getDataProviderID()){
			return marker;
		}
	}
	return null;
}
	
	

